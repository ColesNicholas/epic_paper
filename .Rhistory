fig2.list <-
lapply(X = unique(DF.f1$team),
FUN = function(x){
# identify if case is the team you want to highlight
d <- DF.f1 %>%
mutate(highlight =
if_else(team == x,
1,
0),
highlight = factor(highlight),
scenario = factor(scenario,
labels = c('s',
'e' ,
'i',
't')),
title = x)
# create plot
g <- ggplot(d,
aes(y = m.err,
x = scenario,
group = team,
colour = team,
size = highlight)) +
# make the title a facet (for aesthetic reasons)
facet_wrap(~ title) +
# plot non-highlighted lines in grey
geom_line(data = d %>%
filter(highlight == 0),
colour = "grey90",
linewidth = 1) +
# plot all lines, but then remove the non-highlighted ones
geom_line() +
scale_size_manual(values = c(NA, 2)) +
# clean up aesthetics
theme(legend.position = "none",
axis.title = element_blank()) +
scale_y_continuous(expand =
expansion(mult = c(0, .05)),
limits = c(.5, 2.2)) +
# conditional formatting to manually make it look like a facet
{if(x != "team 10" &
x != "team 11" &
x != "team 12")
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())} +
{if(x != "team 1" &
x != "team 4" &
x != "team 7" &
x != "team 10")
theme(axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank())}
# return plot
return(g)
}
)
margin = theme(plot.margin = unit(c(4, 4, 4, 4), "points"))
fig2 <- grid.arrange(grobs = fig2.list,
left = "",
bottom = "validation")
fig2.list <-
lapply(X = unique(DF.f1$team),
FUN = function(x){
# identify if case is the team you want to highlight
d <- DF.f1 %>%
mutate(highlight =
if_else(team == x,
1,
0),
highlight = factor(highlight),
scenario = factor(scenario,
labels = c('s',
'e' ,
'i',
't')),
title = x)
# create plot
g <- ggplot(d,
aes(y = m.err,
x = scenario,
group = team,
colour = team,
size = highlight)) +
# make the title a facet (for aesthetic reasons)
facet_wrap(~ title) +
# plot non-highlighted lines in grey
geom_line(data = d %>%
filter(highlight == 0),
colour = "grey90",
linewidth = 1) +
# plot all lines, but then remove the non-highlighted ones
geom_line() +
scale_size_manual(values = c(NA, 2)) +
# clean up aesthetics
theme(legend.position = "none",
axis.title = element_blank()) +
scale_y_continuous(expand =
expansion(mult = c(0, .05)),
limits = c(.7, 2.2)) +
# conditional formatting to manually make it look like a facet
{if(x != "team 10" &
x != "team 11" &
x != "team 12")
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())} +
{if(x != "team 1" &
x != "team 4" &
x != "team 7" &
x != "team 10")
theme(axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank())}
# return plot
return(g)
}
)
margin = theme(plot.margin = unit(c(4, 4, 4, 4), "points"))
fig2 <- grid.arrange(grobs = fig2.list,
left = "",
bottom = "validation")
fig2.list <-
lapply(X = unique(DF.f1$team),
FUN = function(x){
# identify if case is the team you want to highlight
d <- DF.f1 %>%
mutate(highlight =
if_else(team == x,
1,
0),
highlight = factor(highlight),
scenario = factor(scenario,
labels = c('s',
'e' ,
'i',
't')),
title = x)
# create plot
g <- ggplot(d,
aes(y = m.err,
x = scenario,
group = team,
colour = team,
size = highlight)) +
# make the title a facet (for aesthetic reasons)
facet_wrap(~ title) +
# plot non-highlighted lines in grey
geom_line(data = d %>%
filter(highlight == 0),
colour = "grey90",
linewidth = 1) +
# plot all lines, but then remove the non-highlighted ones
geom_line() +
scale_size_manual(values = c(NA, 2)) +
# clean up aesthetics
theme(legend.position = "none",
axis.title = element_blank()) +
scale_y_continuous(expand =
expansion(mult = c(0, .05)),
limits = c(.6, 2.2)) +
# conditional formatting to manually make it look like a facet
{if(x != "team 10" &
x != "team 11" &
x != "team 12")
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())} +
{if(x != "team 1" &
x != "team 4" &
x != "team 7" &
x != "team 10")
theme(axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank())}
# return plot
return(g)
}
)
margin = theme(plot.margin = unit(c(4, 4, 4, 4), "points"))
fig2 <- grid.arrange(grobs = fig2.list,
left = "",
bottom = "validation")
png(file = "Figure2.png",
width = 6.5,
height = 7.6,
units = "in",
res = 600)
plot_grid(fig1, fig2,
labels = c('A', 'B'),
ncol = 2)
dev.off()
# Chunk 1
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'lme4',
'lmerTest', 'emmeans',
'gtools', 'gridExtra',
'cowplot')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
# turn scientific notation off
options(scipen = 999)
# set seed to year of Nicholas' favorite [unfinished] album, SMiLE
set.seed(1967)
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# set plotting theme
theme_set(theme_classic())
# free up computational resources
gc()
memory.limit(size = 25000)
# Chunk 2
DF <- readRDS('C:/Users/Nicholas Coles work/Desktop/local/DF.rds')
sim.results <- readRDS('C:/Users/Nicholas Coles work/Desktop/local/sim.results.Rds')
DF.f2.contrasts <- bind_rows(sim.results) %>%
select(scenario, estimate, z.ratio, p.value, team) %>%
mutate(p.value = stars.pval(p.value),
estimate = round(estimate, 2))
# create dataframe containing team performance
DF.f2.teams <- DF %>%
filter(grepl("team", team)) %>%
group_by(team, scenario) %>%
summarise(m.err = mean(error)) %>%
mutate(
rand =
if_else(grepl("random", team),
true = "random",
false = "real"),
team = str_remove(team,
fixed(" (random)"))) %>%
pivot_wider(names_from = rand,
values_from = m.err)
# merge dataframes
DF.f2 <-
full_join(x = DF.f2.teams,
y = DF.f2.contrasts) %>%
mutate(
scenario = factor(scenario,
labels = c('across time',
'across subject',
'across emotion' ,
'across induction')),
scenario = factor(scenario,
levels = c('across subject',
'across emotion' ,
'across induction',
'across time')),
team = factor(team,
levels = paste0('team ',
seq(1, 12))),
team_trunc = str_remove(team,
fixed("team ")),
team_trunc = factor(team_trunc,
levels = seq(1, 12))
)
rm(DF.f2.contrasts, DF.f2.teams)
DF.f2 <- DF.f2 %>%
filter(team == 'team 3' |
team == 'team 4' |
team == 'team 9')
fig.5 <- ggplot(DF.f2,
aes(x = team_trunc)) +
# facet plot
facet_wrap(~ scenario,
ncol = 4) +
# create lollipop segments
geom_segment(aes(y = real,
yend = random,
x = team_trunc,
xend = team_trunc),
linetype = "dotted",
colour = "grey90",
linewidth = 1) +
geom_segment(aes(y = 0,
yend = real,
x = team_trunc,
xend = team_trunc),
colour = "grey90",
linewidth = 1.5) +
# plot real vs. simulated physiology
geom_point(data = DF.f2 %>%
pivot_longer(cols = c(real, random)) %>%
mutate(physiology =
factor(name,
levels = c('real',
'random')
)
),
aes(y = value,
color = team_trunc,
shape = physiology),
size = 4) +
scale_shape_manual(values = c(16, 13)) +
# add descriptives
geom_text(aes(y = random,
label = paste0(estimate %>%
format(nsmall = 2) * -1,
p.value)),
size = 3,
vjust = -1.2) +
# aes
scale_color_manual(values = c("#B79F00", "#7CAE00", "#00B4F0"),
guide = "none") +
xlab("team") +
ylab("mean absolute prediction error") +
scale_y_continuous(expand =
expansion(mult = c(0, .05))) +
theme(legend.position = "bottom")
fig.5
DF.f2$estimate
DF.f2$estimate %>% class
fig.5 <- ggplot(DF.f2,
aes(x = team_trunc)) +
# facet plot
facet_wrap(~ scenario,
ncol = 4) +
# create lollipop segments
geom_segment(aes(y = real,
yend = random,
x = team_trunc,
xend = team_trunc),
linetype = "dotted",
colour = "grey90",
linewidth = 1) +
geom_segment(aes(y = 0,
yend = real,
x = team_trunc,
xend = team_trunc),
colour = "grey90",
linewidth = 1.5) +
# plot real vs. simulated physiology
geom_point(data = DF.f2 %>%
pivot_longer(cols = c(real, random)) %>%
mutate(physiology =
factor(name,
levels = c('real',
'random')
)
),
aes(y = value,
color = team_trunc,
shape = physiology),
size = 4) +
scale_shape_manual(values = c(16, 13)) +
# add descriptives
geom_text(aes(y = random,
label = paste0(estimate  * -1 %>%
format(nsmall = 2),
p.value)),
size = 3,
vjust = -1.2) +
# aes
scale_color_manual(values = c("#B79F00", "#7CAE00", "#00B4F0"),
guide = "none") +
xlab("team") +
ylab("mean absolute prediction error") +
scale_y_continuous(expand =
expansion(mult = c(0, .05))) +
theme(legend.position = "bottom")
fig5
fig.5
DF.f2.contrasts <- bind_rows(sim.results) %>%
select(scenario, estimate, z.ratio, p.value, team) %>%
mutate(p.value = stars.pval(p.value),
estimate = round(estimate, 2) * -1)
sim.results <- readRDS('C:/Users/Nicholas Coles work/Desktop/local/sim.results.Rds')
# create dataframe containing contrasts
DF.f2.contrasts <- bind_rows(sim.results) %>%
select(scenario, estimate, z.ratio, p.value, team) %>%
mutate(p.value = stars.pval(p.value),
estimate = round(estimate, 2) * -1)
# create dataframe containing team performance
DF.f2.teams <- DF %>%
filter(grepl("team", team)) %>%
group_by(team, scenario) %>%
summarise(m.err = mean(error)) %>%
mutate(
rand =
if_else(grepl("random", team),
true = "random",
false = "real"),
team = str_remove(team,
fixed(" (random)"))) %>%
pivot_wider(names_from = rand,
values_from = m.err)
# merge dataframes
DF.f2 <-
full_join(x = DF.f2.teams,
y = DF.f2.contrasts) %>%
mutate(
scenario = factor(scenario,
labels = c('across time',
'across subject',
'across emotion' ,
'across induction')),
scenario = factor(scenario,
levels = c('across subject',
'across emotion' ,
'across induction',
'across time')),
team = factor(team,
levels = paste0('team ',
seq(1, 12))),
team_trunc = str_remove(team,
fixed("team ")),
team_trunc = factor(team_trunc,
levels = seq(1, 12))
)
rm(DF.f2.contrasts, DF.f2.teams)
DF.f2 <- DF.f2 %>%
filter(team == 'team 3' |
team == 'team 4' |
team == 'team 9')
fig.5 <- ggplot(DF.f2,
aes(x = team_trunc)) +
# facet plot
facet_wrap(~ scenario,
ncol = 4) +
# create lollipop segments
geom_segment(aes(y = real,
yend = random,
x = team_trunc,
xend = team_trunc),
linetype = "dotted",
colour = "grey90",
linewidth = 1) +
geom_segment(aes(y = 0,
yend = real,
x = team_trunc,
xend = team_trunc),
colour = "grey90",
linewidth = 1.5) +
# plot real vs. simulated physiology
geom_point(data = DF.f2 %>%
pivot_longer(cols = c(real, random)) %>%
mutate(physiology =
factor(name,
levels = c('real',
'random')
)
),
aes(y = value,
color = team_trunc,
shape = physiology),
size = 4) +
scale_shape_manual(values = c(16, 13)) +
# add descriptives
geom_text(aes(y = random,
label = paste0(estimate %>%
format(nsmall = 2),
p.value)),
size = 3,
vjust = -1.2) +
# aes
scale_color_manual(values = c("#B79F00", "#7CAE00", "#00B4F0"),
guide = "none") +
xlab("team") +
ylab("mean absolute prediction error") +
scale_y_continuous(expand =
expansion(mult = c(0, .05))) +
theme(legend.position = "bottom")
fig.5
png(file = "Figure3.png",
width = 6.5,
height = 7.5,
units = "in",
res = 600)
plot_grid(fig.4, fig.5,
labels = c('A', 'B'),
nrow = 2,
rel_heights = c(1, 3))
dev.off()
tmp <- read.csv('C:/Users/Nicholas Coles work/Desktop/local/EPIC-physiology-examples/ecg_s1-test_sub_12_vid_9_short.csv')
tmp <- tmp %>%
rename(real = ecg,
random = noise) %>%
pivot_longer(cols = c(real, random)) %>%
mutate(name = factor(name,
levels = c('real',
'random')
)
)
fig.4 <- ggplot(data = tmp,
aes(x = time,
y = value)) +
facet_wrap(~ name) +
geom_line(alpha = .5) +
ylab("value (mV)") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
png(file = "Figure3.png",
width = 6.5,
height = 7.5,
units = "in",
res = 600)
plot_grid(fig.4, fig.5,
labels = c('A', 'B'),
nrow = 2,
rel_heights = c(1, 3))
dev.off()
