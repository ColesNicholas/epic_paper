# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05)))
ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5)
ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team_trunc),
size = 4)
ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team_trunc),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF')
ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team_trunc),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF')
ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team_trunc),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean - .5,
label = paste0(p.value__mean)),
size = 3)
fig1.list <-
lapply(X = unique(DF.f1$scenario),
FUN = function(x){
d <- DF.f1 %>%
filter(scenario == x)
g <- ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team_trunc),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean - .5,
label = paste0(p.value__mean)),
size = 3) +
theme(legend.position = "none") +
{if(x != "validation: across induction (i)")
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())}
return(g)
})
grid.arrange(grobs = fig1.list,
nrow = 4,
left = "mean absolute prediction error",
bottom = "team")
fig1.list <-
lapply(X = unique(DF.f1$scenario),
FUN = function(x){
d <- DF.f1 %>%
filter(scenario == x)
g <- ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team_trunc),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean - .5,
label = paste0(p.value__mean)),
size = 3) +
theme(legend.position = "none",
axis.title = element_blank()) +
{if(x != "validation: across induction (i)")
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())}
return(g)
})
grid.arrange(grobs = fig1.list,
nrow = 4,
left = "mean absolute prediction error",
bottom = "team")
fig2 <- grid.arrange(grobs = fig2.list,
left = "",
bottom = "validation")
plot_grid(fig1, fig2,
labels = c('A', 'B'),
ncol = 2)
fig1 <- grid.arrange(grobs = fig1.list,
nrow = 4,
left = "mean absolute prediction error",
bottom = "team")
plot_grid(fig1, fig2,
labels = c('A', 'B'),
ncol = 2)
png(file = "Figure2.png",
width = 6.5,
height = 7.6,
units = "in",
res = 600)
plot_grid(fig1, fig2,
labels = c('A', 'B'),
ncol = 2)
dev.off()
fig2.list <-
lapply(X = unique(DF.f1$team),
FUN = function(x){
# identify if case is the team you want to highlight
d <- DF.f1 %>%
mutate(highlight =
if_else(team == x,
1,
0),
highlight = factor(highlight),
scenario = factor(scenario,
labels = c('s',
'e' ,
'i',
't')),
title = x)
# create plot
g <- ggplot(d,
aes(y = m.err,
x = scenario,
group = team,
colour = team,
size = highlight)) +
# make the title a facet (for aesthetic reasons)
facet_wrap(~ title) +
# plot non-highlighted lines in grey
geom_line(data = d %>%
filter(highlight == 0),
colour = "grey90",
linewidth = 1) +
# plot all lines, but then remove the non-highlighted ones
geom_line() +
scale_size_manual(values = c(NA, 2)) +
# clean up aesthetics
theme(legend.position = "none",
axis.title = element_blank()) +
scale_y_reverse() +
# conditional formatting to manually make it look like a facet
{if(x != "team 10" &
x != "team 11" &
x != "team 12")
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())} +
{if(x != "team 1" &
x != "team 4" &
x != "team 7" &
x != "team 10")
theme(axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank())}
# return plot
return(g)
}
)
margin = theme(plot.margin = unit(c(4, 4, 4, 4), "points"))
fig2 <- grid.arrange(grobs = fig2.list,
left = "",
bottom = "validation")
png(file = "Figure2.png",
width = 6.5,
height = 7.6,
units = "in",
res = 600)
plot_grid(fig1, fig2,
labels = c('A', 'B'),
ncol = 2)
dev.off()
DF.f1$scenario %>% levels()
fig1.list <-
lapply(X = levels(DF.f1$scenario),
FUN = function(x){
d <- DF.f1 %>%
filter(scenario == x)
g <- ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team_trunc),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean - .5,
label = paste0(p.value__mean)),
size = 3) +
theme(legend.position = "none",
axis.title = element_blank()) +
{if(x != "validation: across induction (i)")
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())}
return(g)
})
fig1 <- grid.arrange(grobs = fig1.list,
nrow = 4,
left = "mean absolute prediction error",
bottom = "team")
png(file = "Figure2.png",
width = 6.5,
height = 7.6,
units = "in",
res = 600)
plot_grid(fig1, fig2,
labels = c('A', 'B'),
ncol = 2)
dev.off()
fig1.list <-
lapply(X = levels(DF.f1$scenario),
FUN = function(x){
d <- DF.f1 %>%
filter(scenario == x)
g <- ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team_trunc),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean - .5,
label = paste0(p.value__mean)),
size = 3) +
theme(legend.position = "none",
axis.title = element_blank()) +
{if(x != "validation: across time (t)")
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())}
return(g)
})
fig1 <- grid.arrange(grobs = fig1.list,
nrow = 4,
left = "mean absolute prediction error",
bottom = "team")
png(file = "Figure2.png",
width = 6.5,
height = 7.6,
units = "in",
res = 600)
plot_grid(fig1, fig2,
labels = c('A', 'B'),
ncol = 2)
dev.off()
# open results
#results <- readRDS('C:/Users/Nicholas Coles work/Desktop/local/results.Rds')
# create dataframe containing contrasts
DF.f1.contrasts <- bind_rows(results) %>%
select(contrast:estimate, z.ratio, p.value, team) %>%
mutate(p.value = stars.pval(p.value),
p.value = if_else(
condition = p.value == " ",
true = "n.s.",
false = if_else(
condition = p.value == "*",
true = "*",
false = " "
)
),
estimate = round(estimate, 2)) %>%
pivot_wider(names_from = contrast,
values_from = c(estimate, z.ratio, p.value))
# create dataframe containing baseline performance
DF.f1.baselines <- DF %>%
filter(team == "baseline_mean" |
team == "baseline_random") %>%
group_by(team, scenario) %>%
summarise(m.err = mean(error)) %>%
pivot_wider(names_from = team,
values_from = m.err)
# create dataframe containing team performance
DF.f1.teams <- DF %>%
filter(team != "team 3 (random)",
team != "team 4 (random)",
team != "team 9 (random)",
team != "baseline_mean",
team != "baseline_random",
team != "baseline_tailored") %>%
group_by(team, scenario) %>%
summarise(m.err = mean(error))
# merge dataframes
DF.f1 <-
full_join(x = DF.f1.contrasts,
y = DF.f1.baselines) %>%
full_join(x = .,
y = DF.f1.teams) %>%
mutate(
scenario = factor(scenario,
labels = c('validation: across time (t)',
'validation: across subject (s)',
'validation: across emotion (e)' ,
'validation: across induction (i)')),
scenario = factor(scenario,
levels = c('validation: across subject (s)',
'validation: across emotion (e)' ,
'validation: across induction (i)',
'validation: across time (t)')),
team = factor(team,
levels = paste0('team ',
seq(1, 12))),
team_trunc = str_remove(team,
fixed("team ")),
team_trunc = factor(team_trunc,
levels = seq(1, 12))
)
rm(DF.f1.baselines, DF.f1.contrasts, DF.f1.teams)
fig1.list <-
lapply(X = levels(DF.f1$scenario),
FUN = function(x){
d <- DF.f1 %>%
filter(scenario == x)
g <- ggplot(d,
aes(x = team_trunc,
y = m.err)) +
# facet plot as title
facet_wrap(~ scenario) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team_trunc,
xend = team_trunc,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team_trunc),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean - .5,
label = paste0(p.value__mean)),
size = 3) +
theme(legend.position = "none",
axis.title = element_blank()) +
{if(x != "validation: across time (t)")
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())}
return(g)
})
fig1 <- grid.arrange(grobs = fig1.list,
nrow = 4,
left = "mean absolute prediction error",
bottom = "team")
png(file = "Figure2.png",
width = 6.5,
height = 7.6,
units = "in",
res = 600)
plot_grid(fig1, fig2,
labels = c('A', 'B'),
ncol = 2)
dev.off()
