#results <- readRDS('results.Rds')
# create dataframe containing contrasts
DF.f1.contrasts <- bind_rows(results) %>%
select(contrast:estimate, z.ratio, p.value, team) %>%
mutate(p.value = stars.pval(p.value),
p.value = if_else(
condition = p.value == " ",
true = "n.s.",
false = if_else(
condition = p.value == "*",
true = "*",
false = " "
)
),
estimate = round(estimate, 2)) %>%
pivot_wider(names_from = contrast,
values_from = c(estimate, z.ratio, p.value))
# create dataframe containing baseline performance
DF.f1.baselines <- DF %>%
filter(team == "baseline_mean" |
team == "baseline_random") %>%
group_by(team, scenario) %>%
summarise(m.err = mean(error)) %>%
pivot_wider(names_from = team,
values_from = m.err)
# create dataframe containing team performance
DF.f1.teams <- DF %>%
filter(team != "team 3 (random)",
team != "team 4 (random)",
team != "team 9 (random)",
team != "baseline_mean",
team != "baseline_random",
team != "baseline_tailored") %>%
group_by(team, scenario) %>%
summarise(m.err = mean(error))
# merge dataframes
DF.f1 <-
full_join(x = DF.f1.contrasts,
y = DF.f1.baselines) %>%
full_join(x = .,
y = DF.f1.teams) %>%
mutate(
scenario = factor(scenario,
labels = c('across-time validation',
'across-subject validation',
'across-emotion validation' ,
'across-induction validation')),
scenario = factor(scenario,
levels = c('across-subject validation',
'across-emotion validation' ,
'across-induction validation',
'across-time validation')),
team = factor(team,
levels = paste0('team ',
seq(12, 1)))
)
rm(DF.f1.baselines, DF.f1.contrasts, DF.f1.teams)
fig1 <-
ggplot(DF.f1,
aes(x = m.err,
y = team)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_x_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(y = team,
yend = team,
x = 2.75,
xend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_vline(linetype = 'dotted',
aes(xintercept = baseline_random),
colour = '#3366FF') +
geom_vline(linetype = 'dashed',
aes(xintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(x = baseline_mean - .05,
label = paste0(p.value__mean)),
size = 3,
hjust = 0) +
ylab('model developers') +
xlab('mean absolute prediction error') +
theme(legend.position = "none")
#rm(DF.f1)
fig2.list <-
lapply(X = unique(DF.f1$team),
FUN = function(x){
# identify if case is the team you want to highlight
d <- DF.f1 %>%
mutate(highlight =
if_else(team == x,
1,
0),
highlight = factor(highlight),
scenario = factor(scenario,
labels = c('subject',
'emotion' ,
'validation',
'time')))
# create plot
g <- ggplot(d,
aes(y = m.err,
x = scenario,
group = team,
colour = team,
size = highlight)) +
# plot non-highlighted lines in grey
geom_line(data = d %>%
filter(highlight == 0),
colour = "grey90",
linewidth = 1) +
# plot all lines, but then remove the non-highlighted ones
geom_line() +
scale_size_manual(values = c(NA, 3)) +
# clean up aesthetics
labs(title = x) +
theme(legend.position = "none",
title = element_text(size = 8),
axis.title = element_blank()) +
scale_y_reverse() +
# conditional formatting to manually make it look like a facet
{if(x != "team 10" &
x != "team 11" &
x != "team 12")
theme(axis.text.x = element_blank())} +
{if(x != "team 1" &
x != "team 4" &
x != "team 7" &
x != "team 10")
theme(axis.text.y = element_blank())}
# return plot
return(g)
}
)
#fig2 <-
grid.arrange(grobs = fig2.list,
left = "mean absolute prediction error",
bottom = "validation")
fig2.list <-
lapply(X = unique(DF.f1$team),
FUN = function(x){
# identify if case is the team you want to highlight
d <- DF.f1 %>%
mutate(highlight =
if_else(team == x,
1,
0),
highlight = factor(highlight),
scenario = factor(scenario,
labels = c('subject',
'emotion' ,
'induction',
'time')))
# create plot
g <- ggplot(d,
aes(y = m.err,
x = scenario,
group = team,
colour = team,
size = highlight)) +
# plot non-highlighted lines in grey
geom_line(data = d %>%
filter(highlight == 0),
colour = "grey90",
linewidth = 1) +
# plot all lines, but then remove the non-highlighted ones
geom_line() +
scale_size_manual(values = c(NA, 3)) +
# clean up aesthetics
labs(title = x) +
theme(legend.position = "none",
title = element_text(size = 8),
axis.title = element_blank()) +
scale_y_reverse() +
# conditional formatting to manually make it look like a facet
{if(x != "team 10" &
x != "team 11" &
x != "team 12")
theme(axis.text.x = element_blank())} +
{if(x != "team 1" &
x != "team 4" &
x != "team 7" &
x != "team 10")
theme(axis.text.y = element_blank())}
# return plot
return(g)
}
)
#fig2 <-
grid.arrange(grobs = fig2.list,
left = "mean absolute prediction error",
bottom = "validation")
library('cowplot')
plot_grid(fig1, NULL, fig2,
rel_widths = c(1, .1, 1),
labels = c('A', '', 'B'),
ncol = 3)
fig2 <- grid.arrange(grobs = fig2.list,
left = "mean absolute prediction error",
bottom = "validation")
library('cowplot')
plot_grid(fig1, NULL, fig2,
rel_widths = c(1, .1, 1),
labels = c('A', '', 'B'),
ncol = 3)
fig1
ggplot(DF.f1,
aes(x = team,
y = m.err,)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team,
xend = team,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5)
ggplot(DF.f1,
aes(x = team,
y = m.err,)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team,
xend = team,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_vline(linetype = 'dotted',
aes(xintercept = baseline_random),
colour = '#3366FF')
ggplot(DF.f1,
aes(x = team,
y = m.err,)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team,
xend = team,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_vline(linetype = 'dotted',
aes(xintercept = baseline_random),
colour = '#3366FF') +
geom_vline(linetype = 'dashed',
aes(xintercept = baseline_mean),
colour = '#3366FF')
fig1 <-
ggplot(DF.f1,
aes(x = team,
y = m.err,)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team,
xend = team,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean - .05,
label = paste0(p.value__mean)),
size = 3,
hjust = 0) +
ylab('model developers') +
xlab('mean absolute prediction error') +
theme(legend.position = "none")
#rm(DF.f1)
fig1
fig1 <-
ggplot(DF.f1,
aes(x = team,
y = m.err,)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team,
xend = team,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean + .05,
label = paste0(p.value__mean)),
size = 3,
hjust = 0) +
ylab('model developers') +
xlab('mean absolute prediction error') +
theme(legend.position = "none")
#rm(DF.f1)
fig1
fig1 <-
ggplot(DF.f1,
aes(x = team,
y = m.err,)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_reverse(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team,
xend = team,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean + 1,
label = paste0(p.value__mean)),
size = 3,
hjust = 0) +
ylab('model developers') +
xlab('mean absolute prediction error') +
theme(legend.position = "none")
#rm(DF.f1)
fig1
fig1 <-
ggplot(DF.f1,
aes(x = team,
y = m.err,)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_continuous(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team,
xend = team,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean + 1,
label = paste0(p.value__mean)),
size = 3,
hjust = 0) +
ylab('model developers') +
xlab('mean absolute prediction error') +
theme(legend.position = "none")
#rm(DF.f1)
ggplot(DF.f1,
aes(x = team,
y = m.err,)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_continuous(expand =
expansion(mult = c(0, .05)))
fig1 <-
ggplot(DF.f1,
aes(x = team,
y = m.err,)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_continuous(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team,
xend = team,
y = 2.75,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean + 1,
label = paste0(p.value__mean)),
size = 3,
hjust = 0) +
ylab('model developers') +
xlab('mean absolute prediction error') +
theme(legend.position = "none")
#rm(DF.f1)
fig1
fig1 <-
ggplot(DF.f1,
aes(x = team,
y = m.err)) +
# facet plot
facet_wrap(~ scenario,
nrow = 4,
ncol = 1) +
# reverse x scale
scale_y_continuous(expand =
expansion(mult = c(0, .05))) +
# create lollipop plot
geom_segment(aes(x = team,
xend = team,
y = 0,
yend = m.err),
colour = "grey90",
linewidth = 1.5) +
geom_point(aes(color = team),
size = 4) +
# add lines for baseline_random and baseline_mean performance
geom_hline(linetype = 'dotted',
aes(yintercept = baseline_random),
colour = '#3366FF') +
geom_hline(linetype = 'dashed',
aes(yintercept = baseline_mean),
colour = '#3366FF') +
# add summary statistic text (to show where models significantly differed from mean baseline)
geom_text(aes(y = baseline_mean + 1,
label = paste0(p.value__mean)),
size = 3,
hjust = 0) +
ylab('model developers') +
xlab('mean absolute prediction error') +
theme(legend.position = "none")
#rm(DF.f1)
fig1
